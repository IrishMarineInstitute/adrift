from opendrift.models.oceandrift import OceanDrift
from opendrift.readers import reader_ROMS_native
from opendrift.readers import reader_global_landmask
from datetime import datetime, timedelta, timezone
import pytz

def string2utc(string):
    ''' Convert datetime string to UTC '''

    # Convert string to datetime object
    dt = datetime.fromisoformat(string)

    # Convert to datetime-aware    
    dt = pytz.timezone("Europe/Dublin").localize(dt)
    
    # Convert to UTC
    utc = dt.astimezone(timezone.utc)
    
    y, m, d, H, M = utc.year, utc.month, utc.day, utc.hour, utc.minute
    
    return datetime(y, m , d, H, M)

landmask = reader_global_landmask.Reader()

filename = '{{nc_output_path}}'

""" Set seeding conditions """
longitude = {{longitude}}
latitude = {{latitude}}
    
# Set number of floats 
N = {{number_of_particles}}

# Date
itime = string2utc("{{idate}}")
etime = string2utc("{{edate}}")
    
# Radius for uniform dispersion around source [meters]
R = {{radius}}

# End time of simulation
end_time = string2utc("{{end_of_run}}")
    
""" Model initialization """
model = OceanDrift(loglevel=20)
model.set_config('general:use_auto_landmask', False)

""" Add readers """
# Ocean data
NEA = reader_ROMS_native.Reader('http://milas.marine.ie/thredds/dodsC/IMI_ROMS_HYDRO/NEATLANTIC_NATIVE_2KM_40L_1H/COMBINED_AGGREGATION' )

Connemara = reader_ROMS_native.Reader('http://milas.marine.ie/thredds/dodsC/IMI_ROMS_HYDRO/CONNEMARA_250M_20L_1H/COMBINED_AGGREGATION' )

Galway_Bay = reader_ROMS_native.Reader('http://milas.marine.ie/thredds/dodsC/IMI_ROMS_HYDRO/GALWAY_BAY_NATIVE_70M_8L_1H/COMBINED_AGGREGATION' )

Bantry_Bay = reader_ROMS_native.Reader('http://milas.marine.ie/thredds/dodsC/IMI_ROMS_HYDRO/BANTRY_BAY_NATIVE_250M_20L_1H/COMBINED_AGGREGATION' )

# Adding readers
model.add_reader([landmask, Galway_Bay, Connemara, Bantry_Bay, NEA])

model.set_config('general:coastline_action', 'previous')

""" Seed elements """
model.seed_elements(lon=longitude,
                lat=latitude,
                number=N,
                radius=R,
                radius_type="uniform",
                time=[itime, etime],
                z='seafloor'
                )

        
""" Model run """
model.run(end_time=end_time, 
        time_step=timedelta(minutes=10), 
        time_step_output=timedelta(minutes=60), 
        outfile=filename,
        export_variables=["trajectory", 
                            "time", 
                            "status",
                            "age_seconds",
                            "lon", 
                            "lat"]
        )
